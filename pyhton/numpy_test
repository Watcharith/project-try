.import numpy as np

#++++++++++++++++++++++++++     Create      +++++++++++++=
arr0 = np.array(1) #0 dimension array
arr0.ndim  # check dimension
arrI = np.array([1,2,3]) #1dimension
'''
lis = [1,2,3,4]
b = np.array(lis)
print(b)

tu = (1,2,3,4,5,6,7)
c = np.array(tu)
print(c)
'''
arrII = np.array([[1,2,3],[4,5,6]]) # 2 dimension | different row should has same col

arrIII = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[0,1,0]]])# 3D | diferent dept but need to have ethier row and col

#++++++++++++++++++++++++++++++++++     INdex       ++++++++++++++++++++++++++++++++++

#arrI[2]index same as list for 1,2D
#arrI[2]+arrI[0] | 
# arrI[2] = 100
#same for negative index| arrI[-1] == 3
#arrII["ROW"]["COL"] 2D

#arrIII["dept"]["row"]["col"]

#++++++++++++++++++++++++++++++++++     data       ++++++++++++++++++++++++++++++++++

#arrII.dtype | data type : "int","float","str","bool","complex(aka: i as pow(-1,1/2))","obj"
#arrIV = np.array([[1,2,3],[8,9,10]], dtype = "obj") | create arr with datatype

#+++++++++++++++++++++++++++++++++      Matrix      ++++++++++++++++++++++++++++++++

#matrix == array2D
# square matrix == (row = col)
#zero matrix == (for i in array when i == 0)
#Identitymatrix == for i in diag(arr) when i == 1 if not diag(arr) == 0

#z_arr = np.zeros([2,2,3], dtype="int") | zero matrix
#o_arr = np.ones([2,2,3], dtype="int") | same as 0 but mem = 1
#con_arr = np.full((2,3,3), 20, dtype="float") | constant arr
#emp_arr = np.empty((2,3,2),dtype= "complex") #| คิดจะเฉพาะโครงสมร้างarr เพราะเราจะไม่รู้ข้อมูล
#iden_arr = np.identity(2,dtype="int") | create identity
#id_arr = np.eye(5, 4) | identity not square
#id_arrs = np.eye(5, k = -1) | identity while move 1 if k + move right elif k - move down

#+++++++++++++++++++++++++++++++        linspace        ++++++++++++++++++++++++++ 


